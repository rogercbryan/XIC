/*
This contract describes the rules of the initial coin offering of XIC.  The rules are outlined
below and in the associated white paper.  If any questions or concerns arise, refer to our
subreddit or social media accounts.

Author: Brian Andrews
*/

pragma solidity ^0.4.0;
import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

contract token{function mint(uint256 word, address recipient, uint256 amount);}

contract DCICO is usingOraclize{
	/* necessary variables to keep track of throughout the process such as who is 
	contributing and how many DCI coins they are receiving in exchange for their contribution */
	address public benefactor; //address of the entity running the crowdsale
	uint256 public tokenCap; //cap on how many tokens will be distributed
	uint256 public fundsraised=0; //how much has been contributed so far in ETH
	uint256 public minContribution; //minimum allowed contribution
	uint256 public password; //password to access tokens
	uint256 public passwordICO; //password to access functions of this contract
	uint256 public numtokens; //number of tokens dispersed
	uint256[] public price; //exchange rate $ -> XIC which changes when a certain number of coins are purchased
	uint256 transactionAmount; //number of tokens to be distributed
	uint256[] public milestone; //token sale milestones for change in exchange rate
	address public receive; //recipient address for tokens
	uint256 public trans; //number of ether sent by contributor
	uint256 public extra; //if someone contributes more than we are offering
	token public reward; //token used as reward (address of token is stored here)
	mapping(address => uint256) public balances; //balance of contributor
	bool goalReached = false;
	bool crowdsaleclosed = false;
	uint i = 0; //counter variable for milestone counting
	
	string public ethUSD; //string that will store the info collected from oraclize
	uint256 public EthUsd; //integer
	
	//public event notices (so anyone can see that these processes take place
	event FundTransfer(address recipient, uint256 amount, bool validcontribution);
	event GoalReached(address recipient, uint256 amountRaised);
	event newOraclizeQuery(string description);
	event newPrice(string ex);
	
	function DCICO(address to, uint256 amountDesired, token rewardTok, uint256 word, uint256 word2, uint256 mincon, uint256[] stones, uint256[] rates){ 
		benefactor = to;
		tokenCap = amountDesired * 100000000;
		reward = rewardTok;
		password = word;
		passwordICO = word2;
		minContribution = mincon * 1 ether;
		numtokens = 0;
		milestone = stones;
		price = rates;
		oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
		oraclize_setCustomGasPrice(4000000000 wei);
	}
	
	//return functions that gives the values of desired variables
	function AmountRaised() returns(uint256){return fundsraised;}
	function AmountDispersed() returns(uint256){ return numtokens; }
	function Tokencap() returns(uint256){ return tokenCap; }
	function TokLeft() returns(uint256){ 
		uint256 left = tokenCap - numtokens;
		return left;
	}
	function Xchange() returns (uint256){ 
	    uint256 x = price[i];
	    return x; 
	}
	
	//function to convert api string output to an uint256 type
	function stringToUint(string s) constant returns (uint256 result) {
        bytes memory b = bytes(s);
        uint j;
        result = 0;
        for (j = 0; j < b.length; j++) {
            uint c = uint(b[j]);
            if (c >= 48 && c <= 57) {
                result = result * 10 + (c - 48);
            }
        }
    }
	
	function sendtok() payable{
	    if(numtokens >= (milestone[i]*100000000) && i < price.length-1) //increment i so that new milestone is updated and so is the conversion rate
		{ 
		    while(numtokens >= (milestone[i]*100000000)){
			    i++;}
		}
		extra = 0;
		if(i == 0){
	        transactionAmount = (((EthUsd*1000000)/price[i])*trans)/(1 ether);
		}
		if(i > 0){
		    transactionAmount = (((EthUsd*100000)/price[i])*trans)/(1 ether);
		}
	    if((transactionAmount+numtokens) > tokenCap){ //enforcing cap of distributed tokens
	        extra = ((((transactionAmount+numtokens) - tokenCap)*price[i])/(EthUsd))*10000000000000; //define how far over the cap contributor attempted to go
			transactionAmount -= ((transactionAmount+numtokens) - tokenCap); //reduce account payable
			balances[receive] -= extra; //fix the balance of the user
			fundsraised -= extra; //fix the amount raised
			receive.transfer(extra); //send the extra ether back
			goalReached = true;
			GoalReached(msg.sender, fundsraised);
			crowdsaleclosed = true;
		}
	    if(receive != benefactor){
	        reward.mint(password, receive, transactionAmount); //sends that many coins to contributor minus any value that would result in being over the cap
	        FundTransfer(receive, trans-extra, true); //announce of transfer
			numtokens += transactionAmount; //keeping track of how many tokens have been dispersed
		}
	    benefactor.transfer(this.balance);
	    
	}
	
	//api callback function
	function __callback(bytes32 myid, string result, bytes proof) {
        if(msg.sender != oraclize_cbAddress()) throw;
        ethUSD = result;
		newPrice(ethUSD);
		EthUsd = stringToUint(ethUSD);
		sendtok();
    }
	
	function() payable{
		require(crowdsaleclosed == false && msg.value >= minContribution && i < price.length); //crowdsale must be open
		receive = msg.sender;
        trans = msg.value;
		balances[receive] += trans; //balance of contributor in ether
		fundsraised += trans; //keep track of how much has been raised
		if (oraclize.getPrice("URL") > this.balance) {
            newOraclizeQuery("Oraclize query was NOT sent, please add some ETH to cover for the query fee");
        } 
		else {
			
            newOraclizeQuery("Oraclize query was sent, standing by for the answer..");
            oraclize_query("URL", "json(https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0", 700000);
        }
	}
	
	//block of code used to check if the crowdsale is still open regardless of amount raised
	modifier afterDeadline() {
	    if(goalReached == true) _;
	    
	}
	
	function checkDeadline() afterDeadline {
		crowdsaleclosed = true; //close the crowdsale after the deadline is reached
	}
	
	//reject coins at the end of a crowdsale
	function refund() afterDeadline{
		require(goalReached == true); //redundancy of condition for protection
		uint value = balances[msg.sender]; //copy the value contributed after deadline
		balances[msg.sender] = 0; //set balance to zero
		msg.sender.transfer(value);
		FundTransfer(msg.sender,value,false);
	}
	
	//function to change the password if need be
	function changeword(uint256 word, uint256 newone, address creator) {
		if(word == passwordICO && creator == benefactor) //need to enter old password to successfully change password
		{
			password = newone; //change password
		}
	}
	
	//function to disable the contract controlled by external contract
	function disable(uint256 word, address creator){
		if(word == passwordICO && benefactor == creator)
		{
			crowdsaleclosed = true;	
		}
	}
	
	//self destruct controlled by external contract
	function detonate(uint256 word, address creator){	
		if(word == passwordICO && creator == benefactor)
		{
			selfdestruct(benefactor);	
		}
	}
		
		
}